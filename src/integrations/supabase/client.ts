// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Debug: Log environment variables
console.log('Frontend environment variables:', {
  VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL,
  VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY ? 'exists' : 'missing',
  MODE: import.meta.env.MODE
});

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('Missing required environment variables: VITE_SUPABASE_URL or VITE_SUPABASE_ANON_KEY');
  throw new Error('Missing required environment variables');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(supabaseUrl, supabaseKey);

// API client for backend requests
const API_URL = 'http://localhost:3000';

const getAuthHeader = async () => {
  const { data: { session } } = await supabase.auth.getSession();
  return session ? { Authorization: `Bearer ${session.access_token}` } : {};
};

export const api = {
  // Auth endpoints
  auth: {
    signUp: async (email: string, password: string) => {
      const response = await fetch(`${API_URL}/auth/signup`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });
      if (!response.ok) throw await response.json();
      return response.json();
    },
    signIn: async (email: string, password: string) => {
      const response = await fetch(`${API_URL}/auth/signin`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });
      if (!response.ok) throw await response.json();
      return response.json();
    },
    signOut: async () => {
      const headers = await getAuthHeader();
      const response = await fetch(`${API_URL}/auth/signout`, {
        method: 'POST',
        headers: { ...headers, 'Content-Type': 'application/json' },
      });
      if (!response.ok) throw await response.json();
      return response.json();
    },
    getSession: async () => {
      const headers = await getAuthHeader();
      const response = await fetch(`${API_URL}/auth/session`, {
        headers,
      });
      if (!response.ok) throw await response.json();
      return response.json();
    },
  },
  // Products endpoints
  products: {
    list: async () => {
      const response = await fetch(`${API_URL}/products`);
      if (!response.ok) throw await response.json();
      return response.json();
    },
    get: async (id: string) => {
      const response = await fetch(`${API_URL}/products/${id}`);
      if (!response.ok) throw await response.json();
      return response.json();
    },
  },
  // Cart endpoints
  cart: {
    list: async () => {
      const headers = await getAuthHeader();
      const response = await fetch(`${API_URL}/cart`, { headers });
      if (!response.ok) throw await response.json();
      return response.json();
    },
    add: async (productId: string, quantity: number = 1) => {
      const headers = await getAuthHeader();
      const response = await fetch(`${API_URL}/cart`, {
        method: 'POST',
        headers: { ...headers, 'Content-Type': 'application/json' },
        body: JSON.stringify({ product_id: productId, quantity }),
      });
      if (!response.ok) throw await response.json();
      return response.json();
    },
    update: async (itemId: string, quantity: number) => {
      const headers = await getAuthHeader();
      const response = await fetch(`${API_URL}/cart/${itemId}`, {
        method: 'PUT',
        headers: { ...headers, 'Content-Type': 'application/json' },
        body: JSON.stringify({ quantity }),
      });
      if (!response.ok) throw await response.json();
      return response.json();
    },
    remove: async (itemId: string) => {
      const headers = await getAuthHeader();
      const response = await fetch(`${API_URL}/cart/${itemId}`, {
        method: 'DELETE',
        headers,
      });
      if (!response.ok) throw await response.json();
      return response.json();
    },
    clear: async () => {
      const headers = await getAuthHeader();
      const response = await fetch(`${API_URL}/cart`, {
        method: 'DELETE',
        headers,
      });
      if (!response.ok) throw await response.json();
      return response.json();
    },
  },
  // Orders endpoints
  orders: {
    list: async () => {
      const headers = await getAuthHeader();
      const response = await fetch(`${API_URL}/orders`, { headers });
      if (!response.ok) throw await response.json();
      return response.json();
    },
    create: async (items: any[], total: number) => {
      const headers = await getAuthHeader();
      const response = await fetch(`${API_URL}/orders`, {
        method: 'POST',
        headers: { ...headers, 'Content-Type': 'application/json' },
        body: JSON.stringify({ items, total }),
      });
      if (!response.ok) throw await response.json();
      return response.json();
    },
  },
};